name: svcat
use: svcat
shortDesc: The Kubernetes Service Catalog Command-Line Interface (CLI)
command: ./svcat
tree:
- name: bind
  use: bind INSTANCE_NAME
  shortDesc: Binds an instance's metadata to a secret, which can then be used by an
    application to connect to the instance
  example: "  svcat bind wordpress\n  svcat bind wordpress-mysql-instance --name wordpress-mysql-binding
    --secret-name wordpress-mysql-secret\n  svcat bind wordpress-mysql-instance --name
    wordpress-mysql-binding --external-id c8ca2fcc-4398-11e8-842f-0ed5f89f718b\n  svcat
    bind wordpress-instance --params type=admin\n  svcat bind wordpress-instance --params-json
    '{\n  \t\"type\": \"admin\",\n  \t\"teams\": [\n  \t\t\"news\",\n  \t\t\"weather\",\n
    \ \t\t\"sports\"\n  \t]\n  }'"
  command: ./svcat bind
  flags:
  - name: external-id
    desc: The ID of the binding for use with OSB API (Optional)
  - name: interval
    desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
  - name: name
    desc: The name of the binding. Defaults to the name of the instance.
  - name: param
    shorthand: p
    desc: 'Additional parameter to use when binding the instance, format: NAME=VALUE.
      Cannot be combined with --params-json, Sensitive information should be placed
      in a secret and specified with --secret'
  - name: params-json
    desc: Additional parameters to use when binding the instance, provided as a JSON
      object. Cannot be combined with --param
  - name: secret
    desc: 'Additional parameter, whose value is stored in a secret, to use when binding
      the instance, format: SECRET[KEY]'
  - name: secret-name
    desc: The name of the secret. Defaults to the name of the instance.
  - name: timeout
    desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
  - name: wait
    desc: Wait until the operation completes.
- name: completion
  use: completion SHELL
  shortDesc: Output shell completion code for the specified shell (bash or zsh).
  longDesc: "\nOutput shell completion code for the specified shell (bash or zsh).\nThe
    shell code must be evaluated to provide interactive\ncompletion of svcat commands.
    This can be done by sourcing it from\nthe .bash_profile.\n\nNote: this requires
    the bash-completion framework, which is not installed\nby default on Mac. This
    can be installed by using homebrew:\n\n\t$ brew install bash-completion\n\nOnce
    installed, bash_completion must be evaluated. This can be done by adding the\nfollowing
    line to the .bash_profile\n\n\t$ source $(brew --prefix)/etc/bash_completion\n\nNote
    for zsh users: zsh completions are only supported in versions of zsh >= 5.2\n"
  example: "  # Install bash completion on a Mac using homebrew\n  brew install bash-completion\n
    \ printf \"\\n# Bash completion support\\nsource $(brew --prefix)/etc/bash_completion\\n\"
    >> $HOME/.bash_profile\n  source $HOME/.bash_profile\n  \n  # Load the svcat completion
    code for the specified shell (bash or zsh)\n  source <(svcat completion bash)\n
    \ \n  # Write bash completion code to a file and source if from .bash_profile\n
    \ svcat completion bash > ~/.svcat/svcat_completion.bash.inc\n  printf \"\\n#
    Svcat shell completion\\nsource '$HOME/.svcat/svcat_completion.bash.inc'\\n\"
    >> $HOME/.bash_profile\n  source $HOME/.bash_profile"
  command: ./svcat completion
- name: create
  use: create
  shortDesc: Create a user-defined resource
  command: ./svcat create
  tree:
  - name: class
    use: class [NAME] --from [EXISTING_NAME]
    shortDesc: Copies an existing class into a new user-defined cluster-scoped class
    example: '  svcat create class newclass --from mysqldb'
    command: ./svcat create class
    flags:
    - name: from
      shorthand: f
      desc: Name from an existing class that will be copied (Required)
- name: deprovision
  use: deprovision NAME
  shortDesc: Deletes an instance of a service
  example: '  svcat deprovision wordpress-mysql-instance'
  command: ./svcat deprovision
  flags:
  - name: interval
    desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
  - name: timeout
    desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
  - name: wait
    desc: Wait until the operation completes.
- name: describe
  use: describe
  shortDesc: Show details of a specific resource
  command: ./svcat describe
  tree:
  - name: binding
    use: binding NAME
    shortDesc: Show details of a specific binding
    example: '  svcat describe binding wordpress-mysql-binding'
    command: ./svcat describe binding
    flags:
    - name: show-secrets
      desc: Output the decoded secret values. By default only the length of the secret
        is displayed
  - name: broker
    use: broker NAME
    shortDesc: Show details of a specific broker
    example: '  svcat describe broker asb'
    command: ./svcat describe broker
  - name: class
    use: class NAME
    shortDesc: Show details of a specific class
    example: |2-
        svcat describe class mysqldb
        svcat describe class -uuid 997b8372-8dac-40ac-ae65-758b4a5075a5
    command: ./svcat describe class
    flags:
    - name: uuid
      shorthand: u
      desc: Whether or not to get the class by UUID (the default is by name)
  - name: instance
    use: instance NAME
    shortDesc: Show details of a specific instance
    example: '  svcat describe instance wordpress-mysql-instance'
    command: ./svcat describe instance
  - name: plan
    use: plan NAME
    shortDesc: Show details of a specific plan
    example: |2-
        svcat describe plan standard800
        svcat describe plan --uuid 08e4b43a-36bc-447e-a81f-8202b13e339c
    command: ./svcat describe plan
    flags:
    - name: show-schemas
      desc: Whether or not to show instance and binding parameter schemas
    - name: uuid
      shorthand: u
      desc: Whether or not to get the class by UUID (the default is by name)
- name: get
  use: get
  shortDesc: List a resource, optionally filtered by name
  command: ./svcat get
  tree:
  - name: bindings
    use: bindings [NAME]
    shortDesc: List bindings, optionally filtered by name
    example: |2-
        svcat get bindings
        svcat get bindings --all-namespaces
        svcat get binding wordpress-mysql-binding
        svcat get binding -n ci concourse-postgres-binding
    command: ./svcat get bindings
    flags:
    - name: all-namespaces
      desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
    - name: output
      shorthand: o
      desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
  - name: brokers
    use: brokers [NAME]
    shortDesc: List brokers, optionally filtered by name, scope or namespace
    example: |2-
        svcat get brokers
        svcat get brokers --scope=cluster
        svcat get brokers --scope=all
        svcat get broker minibroker
    command: ./svcat get brokers
    flags:
    - name: all-namespaces
      desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
    - name: output
      shorthand: o
      desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
    - name: scope
      desc: 'Limit the results to a particular scope: cluster, namespace or all'
  - name: classes
    use: classes [NAME]
    shortDesc: List classes, optionally filtered by name, scope or namespace
    example: |2-
        svcat get classes
        svcat get classes --scope cluster
        svcat get classes --scope namespace --namespace dev
        svcat get class mysqldb
        svcat get class --uuid 997b8372-8dac-40ac-ae65-758b4a5075a5
    command: ./svcat get classes
    flags:
    - name: all-namespaces
      desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
    - name: output
      shorthand: o
      desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
    - name: scope
      desc: 'Limit the results to a particular scope: cluster, namespace or all'
    - name: uuid
      shorthand: u
      desc: Whether or not to get the class by UUID (the default is by name)
  - name: instances
    use: instances [NAME]
    shortDesc: List instances, optionally filtered by name
    example: |2-
        svcat get instances
        svcat get instances --class redis
        svcat get instances --plan default
        svcat get instances --all-namespaces
        svcat get instance wordpress-mysql-instance
        svcat get instance -n ci concourse-postgres-instance
    command: ./svcat get instances
    flags:
    - name: all-namespaces
      desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
    - name: class
      shorthand: c
      desc: If present, specify the class used as a filter for this request
    - name: output
      shorthand: o
      desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
    - name: plan
      shorthand: p
      desc: If present, specify the plan used as a filter for this request
  - name: plans
    use: plans [NAME]
    shortDesc: List plans, optionally filtered by name or class
    example: |2-
        svcat get plans
        svcat get plan PLAN_NAME
        svcat get plan CLASS_NAME/PLAN_NAME
        svcat get plan --uuid PLAN_UUID
        svcat get plans --class CLASS_NAME
        svcat get plan --class CLASS_NAME PLAN_NAME
        svcat get plans --uuid --class CLASS_UUID
        svcat get plan --uuid --class CLASS_UUID PLAN_UUID
    command: ./svcat get plans
    flags:
    - name: class
      shorthand: c
      desc: Filter plans based on class. When --uuid is specified, the class name
        is interpreted as a uuid.
    - name: output
      shorthand: o
      desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
    - name: uuid
      shorthand: u
      desc: Whether or not to get the plan by UUID (the default is by name)
- name: provision
  use: provision NAME --plan PLAN --class CLASS
  shortDesc: Create a new instance of a service
  example: |2-
      svcat provision wordpress-mysql-instance --class mysqldb --plan free -p location=eastus -p sslEnforcement=disabled
      svcat provision wordpress-mysql-instance --external-id a7c00676-4398-11e8-842f-0ed5f89f718b --class mysqldb --plan free
      svcat provision wordpress-mysql-instance --class mysqldb --plan free -s mysecret[dbparams]
      svcat provision secure-instance --class mysqldb --plan secureDB --params-json '{
        "encrypt" : true,
        "firewallRules" : [
            {
                "name": "AllowSome",
                "startIPAddress": "75.70.113.50",
                "endIPAddress" : "75.70.113.131"
            }
        ]
      }'
  command: ./svcat provision
  flags:
  - name: class
    desc: The class name (Required)
  - name: external-id
    desc: The ID of the instance for use with the OSB SB API (Optional)
  - name: interval
    desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
  - name: param
    shorthand: p
    desc: 'Additional parameter to use when provisioning the service, format: NAME=VALUE.
      Cannot be combined with --params-json, Sensitive information should be placed
      in a secret and specified with --secret'
  - name: params-json
    desc: Additional parameters to use when provisioning the service, provided as
      a JSON object. Cannot be combined with --param
  - name: plan
    desc: The plan name (Required)
  - name: secret
    desc: 'Additional parameter, whose value is stored in a secret, to use when provisioning
      the service, format: SECRET[KEY]'
  - name: timeout
    desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
  - name: wait
    desc: Wait until the operation completes.
- name: register
  use: register NAME --url URL
  shortDesc: Registers a new broker with service catalog
  example: '  svcat register mysqlbroker --url http://mysqlbroker.com'
  command: ./svcat register
  flags:
  - name: url
    desc: The broker URL (Required)
- name: sync
  use: sync
  shortDesc: Syncs service catalog for a service broker
  command: ./svcat sync
  tree:
  - name: broker
    use: broker NAME
    shortDesc: Syncs service catalog for a service broker
    example: '  svcat sync broker asb'
    command: ./svcat sync broker
- name: touch
  use: touch
  shortDesc: Force Service Catalog to reprocess a resource
  command: ./svcat touch
  tree:
  - name: instance
    use: instance
    shortDesc: Touch an instance to make service-catalog try to process the spec again
    longDesc: "Touch instance will increment the updateRequests field on the instance.
      \nThen, service catalog will process the instance's spec again. It might do
      an update, a delete, or \nnothing."
    example: '  svcat touch instance wordpress-mysql-instance --namespace mynamespace'
    command: ./svcat touch instance
- name: unbind
  use: unbind INSTANCE_NAME
  shortDesc: Unbinds an instance. When an instance name is specified, all of its bindings
    are removed, otherwise use --name to remove a specific binding
  example: |2-
      svcat unbind wordpress-mysql-instance
      svcat unbind --name wordpress-mysql-binding
  command: ./svcat unbind
  flags:
  - name: interval
    desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
  - name: name
    desc: The name of the binding to remove
  - name: timeout
    desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
  - name: wait
    desc: Wait until the operation completes.
- name: version
  use: version
  shortDesc: Provides the version for the Service Catalog client and server
  example: |2-
      svcat version
      svcat version --client
  command: ./svcat version
  flags:
  - name: client
    shorthand: c
    desc: Show only the client version
